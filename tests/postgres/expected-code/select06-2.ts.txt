import pg from 'pg';

export type Select06Params = {
	param1: string;
	param2: number[];
	param3: string;
}

export type Select06Result = {
	id: number;
}

let currentIndex: number;
export async function select06(client: pg.Client | pg.Pool | pg.PoolClient, params: Select06Params): Promise<Select06Result[]> {
	currentIndex = 3;
	const sql = `
	SELECT id
	FROM mytable2
	WHERE name = $1
	OR id in (${generatePlaceholders('$2', params.param2)})
	OR name = $3
	`
	return client.query({ text: sql, rowMode: 'array', values: [params.param1, params.param2[0], params.param3, ...params.param2.slice(1)] })
		.then(res => res.rows.map(row => mapArrayToSelect06Result(row)));
}

function generatePlaceholders(param: string, paramsArray: any[]): string {
	return paramsArray
		.map((_, index) => {
			if (index === 0) {
				return param
			}
			currentIndex++;
			return `$${currentIndex}`;
		})
		.join(', ');
}

function mapArrayToSelect06Result(data: any) {
	const result: Select06Result = {
		id: data[0]
	}
	return result;
}
import type { Database } from 'better-sqlite3';
import { EOL } from 'os';

export type DynamicQuery09DynamicParams = {
	select?: DynamicQuery09Select;
	params: DynamicQuery09Params;
	where?: DynamicQuery09Where[];
}

export type DynamicQuery09Params = {
	name?: string | null;
}

export type DynamicQuery09Result = {
	id?: number;
	double_value?: number;
	likeName?: number;
}

export type DynamicQuery09Select = {
	id?: boolean;
	double_value?: boolean;
	likeName?: boolean;
}

const selectFragments = {
	id: `t2.id`,
	double_value: `t3.double_value`,
	likeName: `? is null OR concat('%', t2.name, t3.name, '%') LIKE ?`,
} as const;

const NumericOperatorList = ['=', '<>', '>', '<', '>=', '<='] as const;
type NumericOperator = typeof NumericOperatorList[number];
type SetOperator = 'IN' | 'NOT IN';
type BetweenOperator = 'BETWEEN';

export type DynamicQuery09Where =
	| { column: 'id'; op: NumericOperator; value: number | null }
	| { column: 'id'; op: SetOperator; value: number[] }
	| { column: 'id'; op: BetweenOperator; value: [number | null, number | null] }
	| { column: 'double_value'; op: NumericOperator; value: number | null }
	| { column: 'double_value'; op: SetOperator; value: number[] }
	| { column: 'double_value'; op: BetweenOperator; value: [number | null, number | null] }
	| { column: 'likeName'; op: NumericOperator; value: number | null }
	| { column: 'likeName'; op: SetOperator; value: number[] }
	| { column: 'likeName'; op: BetweenOperator; value: [number | null, number | null] }

export function dynamicQuery09(db: Database, params?: DynamicQuery09DynamicParams): DynamicQuery09Result[] {

	const { sql, paramsValues } = buildSql(params);
	return db.prepare(sql)
		.raw(true)
		.all(paramsValues)
		.map(data => mapArrayToDynamicQuery09Result(data, params?.select));
}

function buildSql(queryParams?: DynamicQuery09DynamicParams) {
	const { select, where, params } = queryParams || {};

	const selectedSqlFragments: string[] = [];
	const paramsValues: any[] = [];

	const whereColumns = new Set(where?.map(w => w.column) || []);

	if (!select || select.id === true) {
		selectedSqlFragments.push(`t2.id`);
	}
	if (!select || select.double_value === true) {
		selectedSqlFragments.push(`t3.double_value`);
	}
	if (!select || select.likeName === true) {
		selectedSqlFragments.push(`? is null OR concat('%', t2.name, t3.name, '%') LIKE ? as likeName`);
		paramsValues.push(params?.name ?? null);
		paramsValues.push(params?.name ?? null);
	}

	const fromSqlFragments: string[] = [];
	fromSqlFragments.push(`FROM mytable2 t2`);

	if (
		(!select || select.double_value === true)
		|| (!select || select.likeName === true)
		|| whereColumns.has('double_value')
		|| whereColumns.has('likeName')
	) {
		fromSqlFragments.push(`INNER JOIN mytable3 t3 on t3.id = t2.id`);
	}

	const whereSqlFragments: string[] = [];

	const placeholder = () => '?';

	where?.forEach(condition => {
		const whereClause = whereCondition(condition, placeholder);
		if (condition.column === 'likeName') {
			paramsValues.push(params?.name ?? null);
			paramsValues.push(params?.name ?? null);
		}
		if (whereClause?.hasValue) {
			whereSqlFragments.push(whereClause.sql);
			paramsValues.push(...whereClause.values);
		}
	});

	const whereSql = whereSqlFragments.length > 0 ? `WHERE ${whereSqlFragments.join(' AND ')}` : '';

	const sql = `SELECT
	${selectedSqlFragments.join(`,${EOL}`)}
	${fromSqlFragments.join(EOL)}
	${whereSql}`;

	return { sql, paramsValues };
}

function mapArrayToDynamicQuery09Result(data: any, select?: DynamicQuery09Select) {
	const result = {} as DynamicQuery09Result;
	let rowIndex = -1;
	if (!select || select.id === true) {
		rowIndex++;
		result.id = data[rowIndex];
	}
	if (!select || select.double_value === true) {
		rowIndex++;
		result.double_value = data[rowIndex];
	}
	if (!select || select.likeName === true) {
		rowIndex++;
		result.likeName = data[rowIndex];
	}
	return result;
}

type WhereConditionResult = {
	sql: string;
	hasValue: boolean;
	values: any[];
}

function whereCondition(condition: DynamicQuery09Where, placeholder: () => string): WhereConditionResult | null {
	const selectFragment = selectFragments[condition.column];
	const { op, value } = condition;

	if (op === 'BETWEEN') {
		const [from, to] = Array.isArray(value) ? value : [null, null];
		return {
			sql: `${selectFragment} BETWEEN ${placeholder()} AND ${placeholder()}`,
			hasValue: from != null && to != null,
			values: [from, to]
		}
	}
	if (op === 'IN' || op === 'NOT IN') {
		if (!Array.isArray(value) || value.length === 0) {
			return { sql: '', hasValue: false, values: [] };
		}
		return {
			sql: `${selectFragment} ${op} (${value.map(() => placeholder()).join(', ')})`,
			hasValue: true,
			values: value
		}
	}
	if (NumericOperatorList.includes(op)) {
		return {
			sql: `${selectFragment} ${op} ${placeholder()}`,
			hasValue: value != null,
			values: [value]
		}
	}
	return null;
}
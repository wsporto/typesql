import type { Database } from 'better-sqlite3';
import { EOL } from 'os';

export type DynamicQuery12DynamicParams = {
	select?: DynamicQuery12Select;
	params?: DynamicQuery12Params;
	where?: DynamicQuery12Where[];
}

export type DynamicQuery12Params = {
	param1?: Date | null;
	param2?: string | null;
	param3?: number | null;
}

export type DynamicQuery12Result = {
	id?: number;
	name?: string;
}

export type DynamicQuery12Select = {
	id?: boolean;
	name?: boolean;
}

const selectFragments = {
	id: `c1.id`,
	name: `c2.name`,
} as const;

const NumericOperatorList = ['=', '<>', '>', '<', '>=', '<='] as const;
type NumericOperator = typeof NumericOperatorList[number];
type StringOperator = '=' | '<>' | '>' | '<' | '>=' | '<=' | 'LIKE';
type SetOperator = 'IN' | 'NOT IN';
type BetweenOperator = 'BETWEEN';

export type DynamicQuery12Where =
	| { column: 'id'; op: NumericOperator; value: number | null }
	| { column: 'id'; op: SetOperator; value: number[] }
	| { column: 'id'; op: BetweenOperator; value: [number | null, number | null] }
	| { column: 'name'; op: StringOperator; value: string | null }
	| { column: 'name'; op: SetOperator; value: string[] }
	| { column: 'name'; op: BetweenOperator; value: [string | null, string | null] }

export function dynamicQuery12(db: Database, params?: DynamicQuery12DynamicParams): DynamicQuery12Result[] {

	const { sql, paramsValues } = buildSql(params);
	return db.prepare(sql)
		.raw(true)
		.all(paramsValues)
		.map(data => mapArrayToDynamicQuery12Result(data, params?.select));
}

function buildSql(queryParams?: DynamicQuery12DynamicParams) {
	const { select, where, params } = queryParams || {};

	const selectedSqlFragments: string[] = [];
	const paramsValues: any[] = [];

	const whereColumns = new Set(where?.map(w => w.column) || []);

	const withFragments: string[] = [];
	withFragments.push(`cte1 as (
		select id, value from mytable1
		WHERE max(date(value, 'auto'), ?) = min(date(value, 'auto'), ?)
	)`);
	paramsValues.push(params?.param1?.toISOString().split('T')[0]);
	paramsValues.push(params?.param1?.toISOString().split('T')[0]);
	withFragments.push(`cte2 as (
		select id, name from mytable2
		WHERE max(name, ?) = min(name, ?)
	)`);
	paramsValues.push(params?.param2);
	paramsValues.push(params?.param2);
	if (!select || select.id === true) {
		selectedSqlFragments.push(`c1.id`);
	}
	if (!select || select.name === true) {
		selectedSqlFragments.push(`c2.name`);
	}

	const fromSqlFragments: string[] = [];
	fromSqlFragments.push(`FROM cte1 c1`);
	fromSqlFragments.push(`INNER JOIN cte2 c2 on c1.id = c2.id`);

	const whereSqlFragments: string[] = [];

	whereSqlFragments.push(`max(c1.id, ?) = min(c2.id, ?)`);
	paramsValues.push(params?.param3 ?? null);
	paramsValues.push(params?.param3 ?? null);
	const placeholder = () => '?';

	where?.forEach(condition => {
		const whereClause = whereCondition(condition, placeholder);
		if (whereClause?.hasValue) {
			whereSqlFragments.push(whereClause.sql);
			paramsValues.push(...whereClause.values);
		}
	});

	const withSql = withFragments.length > 0
		? `WITH${EOL}${withFragments.join(`,${EOL}`)}${EOL}`
		: '';

	const whereSql = whereSqlFragments.length > 0 ? `WHERE ${whereSqlFragments.join(' AND ')}` : '';

	const sql = `${withSql}SELECT
	${selectedSqlFragments.join(`,${EOL}`)}
	${fromSqlFragments.join(EOL)}
	${whereSql}`;

	return { sql, paramsValues };
}

function mapArrayToDynamicQuery12Result(data: any, select?: DynamicQuery12Select) {
	const isSelected = (field: keyof DynamicQuery12Select) =>
		!select || select[field] === true;

	const result = {} as DynamicQuery12Result;
	let rowIndex = -1;
	if (isSelected('id')) {
		rowIndex++;
		result.id = data[rowIndex];
	}
	if (isSelected('name')) {
		rowIndex++;
		result.name = data[rowIndex];
	}
	return result;
}

type WhereConditionResult = {
	sql: string;
	hasValue: boolean;
	values: any[];
}

function whereCondition(condition: DynamicQuery12Where, placeholder: () => string): WhereConditionResult | null {
	const selectFragment = selectFragments[condition.column];
	const { op, value } = condition;

	if (op === 'LIKE') {
		return {
			sql: `${selectFragment} LIKE ${placeholder()}`,
			hasValue: value != null,
			values: [value]
		}
	}
	if (op === 'BETWEEN') {
		const [from, to] = Array.isArray(value) ? value : [null, null];
		return {
			sql: `${selectFragment} BETWEEN ${placeholder()} AND ${placeholder()}`,
			hasValue: from != null && to != null,
			values: [from, to]
		}
	}
	if (op === 'IN' || op === 'NOT IN') {
		if (!Array.isArray(value) || value.length === 0) {
			return { sql: '', hasValue: false, values: [] };
		}
		return {
			sql: `${selectFragment} ${op} (${value.map(() => placeholder()).join(', ')})`,
			hasValue: true,
			values: value
		}
	}
	if (NumericOperatorList.includes(op)) {
		return {
			sql: `${selectFragment} ${op} ${placeholder()}`,
			hasValue: value != null,
			values: [value]
		}
	}
	return null;
}
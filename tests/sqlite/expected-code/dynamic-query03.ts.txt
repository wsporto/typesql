import type { Database } from 'better-sqlite3';
import { EOL } from 'os';

export type DynamicQuery03DynamicParams = {
	select?: DynamicQuery03Select;
	where?: DynamicQuery03Where[];
}

export type DynamicQuery03Result = {
	id?: number;
	value?: number;
}

export type DynamicQuery03Select = {
	id?: boolean;
	value?: boolean;
}

const selectFragments = {
	id: `t1.id`,
	value: `t1.value`,
} as const;

const NumericOperatorList = ['=', '<>', '>', '<', '>=', '<='] as const;
type NumericOperator = typeof NumericOperatorList[number];
type SetOperator = 'IN' | 'NOT IN';
type BetweenOperator = 'BETWEEN';

export type DynamicQuery03Where =
	| { column: 'id'; op: NumericOperator; value: number | null }
	| { column: 'id'; op: SetOperator; value: number[] }
	| { column: 'id'; op: BetweenOperator; value: [number | null, number | null] }
	| { column: 'value'; op: NumericOperator; value: number | null }
	| { column: 'value'; op: SetOperator; value: number[] }
	| { column: 'value'; op: BetweenOperator; value: [number | null, number | null] }

export function dynamicQuery03(db: Database, params?: DynamicQuery03DynamicParams): DynamicQuery03Result[] {
	const paramsValues: any = [];
	const whereColumns = new Set(params?.where?.map(w => w.column) || []);
	let sql = 'SELECT';
	if (params?.select == null || params.select.id) {
		sql = appendSelect(sql, `t1.id`);
	}
	if (params?.select == null || params.select.value) {
		sql = appendSelect(sql, `t1.value`);
	}
	sql += EOL + `FROM mytable1 t1`;
	sql += EOL + `WHERE 1 = 1`;
	params?.where?.forEach(condition => {
		const where = whereCondition(condition, () => '?');
		if (where?.hasValue) {
			sql += EOL + 'AND ' + where.sql;
			paramsValues.push(...where.values);
		}
	});
	return db.prepare(sql)
		.raw(true)
		.all(paramsValues)
		.map(data => mapArrayToDynamicQuery03Result(data, params?.select));
}

function mapArrayToDynamicQuery03Result(data: any, select?: DynamicQuery03Select) {
	const result = {} as DynamicQuery03Result;
	let rowIndex = -1;
	if (select == null || select.id) {
		rowIndex++;
		result.id = data[rowIndex];
	}
	if (select == null || select.value) {
		rowIndex++;
		result.value = data[rowIndex];
	}
	return result;
}

function appendSelect(sql: string, selectField: string) {
	if (sql.toUpperCase().endsWith('SELECT')) {
		return sql + EOL + selectField;
	}
	else {
		return sql + ', ' + EOL + selectField;
	}
}

type WhereConditionResult = {
	sql: string;
	hasValue: boolean;
	values: any[];
}

function whereCondition(condition: DynamicQuery03Where, placeholder: () => string): WhereConditionResult | null {
	const selectFragment = selectFragments[condition.column];
	const { op, value } = condition;

	if (op === 'BETWEEN') {
		const [from, to] = Array.isArray(value) ? value : [null, null];
		return {
			sql: `${selectFragment} BETWEEN ${placeholder()} AND ${placeholder()}`,
			hasValue: from != null && to != null,
			values: [from, to]
		}
	}
	if (op === 'IN' || op === 'NOT IN') {
		if (!Array.isArray(value) || value.length === 0) {
			return { sql: '', hasValue: false, values: [] };
		}
		return {
			sql: `${selectFragment} ${op} (${value.map(() => placeholder()).join(', ')})`,
			hasValue: true,
			values: value
		}
	}
	if (NumericOperatorList.includes(op)) {
		return {
			sql: `${selectFragment} ${op} ${placeholder()}`,
			hasValue: value != null,
			values: [value]
		}
	}
	return null;
}